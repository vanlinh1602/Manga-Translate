{"version":3,"file":"static/js/198.4f1e1585.chunk.js","mappings":"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","sources":["utils/image.ts","lib/options.ts","utils/@reduxjs/toolkit.tsx","features/Translate/store/reducer.ts","configs/api.ts","services/api/index.ts","services/index.ts","features/Translate/store/selectors.ts","features/Translate/store/saga.ts","features/Translate/store/index.ts","utils/redux-injectors.ts","webpack://manga-translate/./src/features/Translate/Header/styles.module.less?22dd","features/Translate/Header/index.tsx","features/Translate/PickImage/index.tsx","webpack://manga-translate/./src/features/Translate/styles.module.less?c578","features/Translate/TranslateOptions/index.tsx","features/Translate/index.tsx","pages/Home/index.tsx"],"sourcesContent":["import type { RcFile } from 'antd/lib/upload';\n\nexport const getBase64 = (file: RcFile): Promise<string> =>\n  new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.readAsDataURL(file);\n    reader.onload = () => resolve((reader.result as string).toString().split(',')[1]);\n    reader.onerror = (error) => reject(error);\n  });\n\nexport const getUrlImageBase64 = (base64: string) => `data:image/jpeg;base64,${base64}`;\n","export const FONTS = ['Mynerve', 'Bangers', 'Fruktur', 'Gluten', 'Roboto', 'SedgwickAveDisplay'];\n","import {\n  createSlice as createSliceOriginal,\n  CreateSliceOptions,\n  SliceCaseReducers,\n} from '@reduxjs/toolkit';\n\nimport type { RootStateKeyType } from '../types/injector-typings';\n\n/* Wrap createSlice with stricter Name options */\nexport const createSlice = <\n  State,\n  CaseReducers extends SliceCaseReducers<State>,\n  Name extends RootStateKeyType\n>(\n  options: CreateSliceOptions<State, CaseReducers, Name>\n) => createSliceOriginal(options);\n","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { createSlice } from 'utils/@reduxjs/toolkit';\n\nimport type { DataTranslate, ImageDeteted, Translated, TranslateState } from '../types';\n\nexport const initialState: TranslateState = {\n  fontSize: 14,\n  maxWidth: 15,\n  showOriginText: false,\n  handing: false,\n  useCurrentImage: true,\n  font: 'Gluten',\n};\n\nconst slice = createSlice({\n  name: 'translateStore',\n  initialState,\n  reducers: {\n    changeFont(state, action: PayloadAction<string>) {\n      state.font = action.payload;\n    },\n    changeFontSize(state, action: PayloadAction<number>) {\n      state.fontSize = action.payload;\n    },\n    changeShowOriginText(state, action: PayloadAction<boolean>) {\n      state.showOriginText = action.payload;\n    },\n    changeMaxWidth(state, action: PayloadAction<number>) {\n      state.maxWidth = action.payload;\n    },\n    changeUseCurrentImage(state, action: PayloadAction<boolean>) {\n      state.useCurrentImage = action.payload;\n    },\n\n    detectBubble(state) {\n      state.handing = true;\n    },\n\n    translateText(state, _action: PayloadAction<CustomObject<DataTranslate>>) {\n      state.handing = true;\n    },\n\n    removeText(state, _action: PayloadAction<CustomObject<number[][]>>) {\n      state.handing = true;\n    },\n\n    updateDataDetect(state, actions: PayloadAction<ImageDeteted | undefined>) {\n      state.dataDetect = actions.payload;\n      state.handing = false;\n    },\n\n    updateOriginImage(state, action: PayloadAction<string | undefined>) {\n      state.originImage = action.payload;\n    },\n\n    updateImageDetect(state, action: PayloadAction<string | undefined>) {\n      state.handing = false;\n      if (action.payload) {\n        state.dataDetect = {\n          ...state.dataDetect,\n          imageDetected: action.payload,\n        };\n      }\n    },\n    updateTranslated(state, action: PayloadAction<Translated>) {\n      state.translated = {\n        ...state.translated,\n        ...action.payload,\n      };\n    },\n  },\n});\n\nexport const { actions, name: key, reducer } = slice;\n","export const BACKEND_URI = 'http://localhost';\nexport const PORT = 8000;\n\nexport const BACKEND = `${BACKEND_URI}:${PORT}`;\n","import { ApiResponse, ApisauceConfig, ApisauceInstance, create } from 'apisauce';\nimport type { ApiProblems } from 'types';\n\nfunction getApiProblem(response: ApiResponse<any>): ApiProblems {\n  let problem: ApiProblems = { kind: 'unknown' };\n  switch (response.problem) {\n    case 'CONNECTION_ERROR':\n      problem = { kind: 'cannot-connect', temporary: true };\n      break;\n    case 'NETWORK_ERROR':\n      problem = { kind: 'cannot-connect', temporary: true };\n      break;\n    case 'TIMEOUT_ERROR':\n      problem = { kind: 'timeout', temporary: true };\n      break;\n    case 'SERVER_ERROR':\n      problem = { kind: 'server', error: response.originalError };\n      break;\n    case 'CLIENT_ERROR':\n      switch (response.status) {\n        case 401:\n          problem = { kind: 'unauthorized' };\n          break;\n        case 403:\n          problem = { kind: 'forbidden' };\n          break;\n        case 404:\n          problem = { kind: 'not-found' };\n          break;\n        default:\n          problem = { kind: 'rejected' };\n      }\n      break;\n    case 'CANCEL_ERROR':\n      problem = { kind: 'cancelled' };\n      break;\n    case 'UNKNOWN_ERROR':\n    default:\n  }\n\n  if (response.originalError) {\n    problem.error = response.originalError;\n  }\n\n  return problem;\n}\n\nexport default class Api {\n  api: ApisauceInstance;\n\n  config: ApisauceConfig;\n\n  constructor(config: ApisauceConfig) {\n    this.config = config;\n    this.api = create(config);\n  }\n\n  post = async <T>(path: string, params?: any): Promise<{ kind: 'ok'; data: T } | ApiProblems> => {\n    const response: ApiResponse<any> = await this.api.post(path, params);\n\n    if (response.ok) {\n      return { kind: 'ok', data: response.data };\n    }\n    return getApiProblem(response);\n  };\n}\n","import { BACKEND } from 'configs';\n\nimport Api from './api';\n\nexport const backendService = new Api({\n  baseURL: BACKEND,\n});\n","import { createSelector } from '@reduxjs/toolkit';\nimport type { RootState } from 'types';\n\nimport { initialState } from './reducer';\n\nconst selectDomain = (state: RootState) => state?.translateStore || initialState;\n\nexport const selectWating = createSelector([selectDomain], (state) => state.handing);\n\nexport const selectFontSize = createSelector([selectDomain], (state) => state.fontSize);\n\nexport const selectShowOriginText = createSelector([selectDomain], (state) => state.showOriginText);\n\nexport const selectOriginImage = createSelector([selectDomain], (state) => state.originImage);\n\nexport const selectTranslateData = createSelector([selectDomain], (state) => state);\n\nexport const selectDataDetect = createSelector([selectDomain], (state) => state.dataDetect);\n","import type { PayloadAction } from '@reduxjs/toolkit';\nimport { notification } from 'antd';\nimport { all, put, select, takeLatest } from 'redux-saga/effects';\nimport { backendService } from 'services';\n\nimport type { DataTranslate, ImageDeteted, Translated, TranslateState } from '../types';\nimport { actions as translateAction } from './reducer';\nimport { selectOriginImage, selectTranslateData } from './selectors';\n\nfunction* detectBubble() {\n  const image: string = yield select(selectOriginImage);\n  const result: WithApiResult<ImageDeteted> = yield backendService.post<ImageDeteted>(\n    '/detectBubble',\n    { image }\n  );\n\n  if (result.kind === 'ok') {\n    yield put(translateAction.updateDataDetect(result.data));\n    return;\n  }\n  yield put(translateAction.updateDataDetect(undefined));\n  notification.warning({\n    message: 'Detect Fail',\n    description: result.kind,\n  });\n}\n\nfunction* translateText(action: PayloadAction<CustomObject<DataTranslate>>) {\n  const data = action.payload;\n  const translateData: TranslateState = yield select(selectTranslateData);\n  const useOriginImage = !translateData.useCurrentImage;\n  const result: WithApiResult<{ image: string }> = yield backendService.post<{ image: string }>(\n    '/translateText',\n    {\n      image: useOriginImage ? translateData.originImage : translateData.dataDetect?.imageDetected,\n      fontSize: translateData.fontSize,\n      maxWidth: translateData.maxWidth,\n      dataTrans: Object.values(data).map((value) => value),\n      font: translateData.font ?? 'Roboto',\n    }\n  );\n\n  if (result.kind === 'ok') {\n    const translated: Translated = {};\n    Object.entries(data).forEach(([key, value]) => {\n      translated[key] = {\n        text: value.text,\n        location: value.location,\n        font: translateData.font,\n        fontSize: translateData.fontSize,\n        textInLine: translateData.maxWidth,\n      };\n    });\n\n    yield put(translateAction.updateImageDetect(result.data.image));\n    yield put(translateAction.updateTranslated(translated));\n    return;\n  }\n  yield put(translateAction.updateImageDetect());\n  notification.warning({\n    message: 'Translate Fail',\n    description: result.kind,\n  });\n}\n\nfunction* removeText(action: PayloadAction<CustomObject<number[][]>>) {\n  const location = action.payload;\n  const translateData: TranslateState = yield select(selectTranslateData);\n\n  const selectedGroup = Object.keys(location).map((key) => key);\n  const transLatedData: Translated = {};\n  Object.entries(translateData.translated ?? {}).forEach(([key, data]) => {\n    if (!selectedGroup.includes(key)) {\n      transLatedData[key] = data;\n    }\n  });\n\n  const result: WithApiResult<{ image: string }> = yield backendService.post<{ image: string }>(\n    '/removeText',\n    {\n      image: translateData.originImage,\n      location,\n      translated: transLatedData,\n    }\n  );\n  if (result.kind === 'ok') {\n    yield put(translateAction.updateImageDetect(result.data.image));\n    return;\n  }\n  yield put(translateAction.updateImageDetect());\n  notification.warning({\n    message: 'Remmove Text Fail',\n    description: result.kind,\n  });\n}\n\nexport default function* saga() {\n  yield all([takeLatest(translateAction.detectBubble.type, detectBubble)]);\n  yield all([takeLatest(translateAction.translateText.type, translateText)]);\n  yield all([takeLatest(translateAction.removeText.type, removeText)]);\n}\n","import { useInjectReducer, useInjectSaga } from 'utils/redux-injectors';\n\nimport { actions, key, reducer } from './reducer';\nimport saga from './saga';\n\nexport const useTranslateSlice = () => {\n  useInjectReducer({ key, reducer });\n  useInjectSaga({\n    key,\n    saga,\n  });\n  return { actions };\n};\n","import { useInjectReducer as useReducer, useInjectSaga as useSaga } from 'redux-injectors';\n\nimport type {\n  InjectReducerParams,\n  InjectSagaParams,\n  RootStateKeyType,\n} from './types/injector-typings';\n\n/* Wrap redux-injectors with stricter types */\nexport function useInjectReducer<Key extends RootStateKeyType>(params: InjectReducerParams<Key>) {\n  return useReducer(params);\n}\nexport function useInjectSaga(params: InjectSagaParams) {\n  return useSaga(params);\n}\n","// extracted by mini-css-extract-plugin\nexport default {\"header\":\"styles_header__uOkvL\"};","import { Button, Checkbox, Col, Form, Layout, Row, Select, Typography } from 'antd';\nimport { FONTS } from 'lib/options';\nimport _, { range } from 'lodash';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useTranslateSlice } from '../store';\nimport { selectTranslateData } from '../store/selectors';\nimport S from './styles.module.less';\n\ntype CustomForm = {\n  fontSize: number;\n  showOriginText: boolean;\n  maxWidth: number;\n  useCurrentImage: boolean;\n  font: string;\n};\n\nconst Header = () => {\n  const translateData = useSelector(selectTranslateData);\n  const dispatch = useDispatch();\n  const { actions } = useTranslateSlice();\n  const [form] = Form.useForm<CustomForm>();\n\n  useEffect(() => {\n    form.setFieldsValue({\n      fontSize: translateData.fontSize,\n      showOriginText: translateData.showOriginText,\n      maxWidth: translateData.maxWidth,\n      useCurrentImage: translateData.useCurrentImage,\n      font: translateData.font ?? 'Gluten',\n    });\n  }, [form, translateData]);\n\n  const handleRemoveImage = () => {\n    dispatch(actions.updateOriginImage(undefined));\n    dispatch(actions.updateDataDetect(undefined));\n  };\n\n  return (\n    <Layout.Header className={S.header} style={{ display: 'inline-table' }}>\n      <Typography.Title level={5}>Translate Manga</Typography.Title>\n      <Row gutter={[12, 12]}>\n        {!translateData.dataDetect ? (\n          <>\n            <Col>\n              <Button type=\"primary\" onClick={() => dispatch(actions.detectBubble())}>\n                Detect Bubble\n              </Button>\n            </Col>\n            <Col>\n              <Button type=\"primary\" danger onClick={handleRemoveImage}>\n                Remove/Change Image\n              </Button>\n            </Col>\n          </>\n        ) : (\n          <Form\n            form={form}\n            layout=\"vertical\"\n            style={{ width: '100%' }}\n            onValuesChange={(value) => {\n              const { fontSize, maxWidth, showOriginText, useCurrentImage, font } = value;\n              if (fontSize) {\n                dispatch(actions.changeFontSize(fontSize));\n              } else if (maxWidth) {\n                dispatch(actions.changeMaxWidth(maxWidth));\n              } else if (!_.isNil(showOriginText)) {\n                dispatch(actions.changeShowOriginText(showOriginText));\n              } else if (!_.isNil(useCurrentImage)) {\n                dispatch(actions.changeUseCurrentImage(useCurrentImage));\n              } else if (font) {\n                dispatch(actions.changeFont(font));\n              }\n            }}\n          >\n            <Row gutter={[12, 12]} style={{ alignItems: 'center' }}>\n              <Col span={3}>\n                <Form.Item label=\"Font\" name=\"font\">\n                  <Select\n                    options={FONTS.map((value) => ({\n                      value,\n                      label: <Typography style={{ fontFamily: value }}>{value}</Typography>,\n                    }))}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={3}>\n                <Form.Item label=\"Cỡ chữ\" name=\"fontSize\">\n                  <Select\n                    options={range(10, 50, 1).map((value) => ({\n                      value,\n                      label: value,\n                    }))}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={3}>\n                <Form.Item label=\"Số chữ trên 1 dòng\" name=\"maxWidth\">\n                  <Select\n                    options={range(1, 30, 1).map((value) => ({\n                      value,\n                      label: value,\n                    }))}\n                  />\n                </Form.Item>\n              </Col>\n              <Col span={6} style={{ alignItems: 'center', margin: 0 }}>\n                <Form.Item\n                  name=\"showOriginText\"\n                  valuePropName=\"checked\"\n                  style={{ marginBottom: 0 }}\n                >\n                  <Checkbox>Hiển thị văn bản gốc</Checkbox>\n                </Form.Item>\n                <Form.Item\n                  name=\"useCurrentImage\"\n                  valuePropName=\"checked\"\n                  style={{ marginBottom: 0 }}\n                >\n                  <Checkbox>Sử dụng hình hiện tại để dịch</Checkbox>\n                </Form.Item>\n              </Col>\n              <Col>\n                <Button danger type=\"primary\" onClick={handleRemoveImage}>\n                  Remove/Change Image\n                </Button>\n              </Col>\n            </Row>\n          </Form>\n        )}\n      </Row>\n    </Layout.Header>\n  );\n};\n\nexport default Header;\n","import { InboxOutlined } from '@ant-design/icons';\nimport { Upload } from 'antd';\nimport { useDispatch } from 'react-redux';\nimport { getBase64 } from 'utils/image';\n\nimport { useTranslateSlice } from '../store';\n\nconst PickImage = () => {\n  const { Dragger } = Upload;\n  const dispatch = useDispatch();\n  const { actions } = useTranslateSlice();\n  return (\n    <Dragger\n      height={window.innerHeight - 200}\n      name=\"file\"\n      beforeUpload={(file) => {\n        getBase64(file).then((value) => dispatch(actions.updateOriginImage(value)));\n      }}\n    >\n      <p className=\"ant-upload-drag-icon\">\n        <InboxOutlined />\n      </p>\n      <p className=\"ant-upload-text\">Click or drag file to this area to upload</p>\n      <p className=\"ant-upload-hint\">\n        Support for a single or bulk upload. Strictly prohibited from uploading company data or\n        other banned files.\n      </p>\n    </Dragger>\n  );\n};\n\nexport default PickImage;\n","// extracted by mini-css-extract-plugin\nexport default {\"container\":\"styles_container__yaDan\",\"content\":\"styles_content__Bx-04\"};","import { Button, Col, Form, Input, Layout, Row, Switch } from 'antd';\nimport { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { useTranslateSlice } from '../store';\nimport { selectDataDetect, selectShowOriginText } from '../store/selectors';\nimport type { DataTranslate } from '../types';\n\ntype CustomForm = CustomObject<{\n  isTrans: boolean;\n  text: string;\n  textTrans: string;\n}>;\n\nconst TranslateOptions = () => {\n  const [form] = Form.useForm<CustomForm>();\n  const dispatch = useDispatch();\n  const { actions } = useTranslateSlice();\n  const dataDetect = useSelector(selectDataDetect);\n  const showOriginText = useSelector(selectShowOriginText);\n\n  useEffect(() => {\n    const originForm: CustomForm = {};\n    Object.entries(dataDetect?.groupText ?? {}).forEach(([key, group]) => {\n      originForm[key] = {\n        isTrans: true,\n        text: group.text,\n        textTrans: group.textTrans,\n      };\n    });\n    form.setFieldsValue(originForm);\n    // eslint-disable-next-line react-hooks/exhaustive-deps\n  }, [form]);\n\n  const handleTranslate = () => {\n    const dataForm = form.getFieldsValue();\n    const dataTrans: CustomObject<DataTranslate> = {};\n\n    Object.entries(dataForm ?? {}).forEach(([key, data]) => {\n      if (data.isTrans) {\n        dataTrans[key] = {\n          text: dataForm[key].textTrans,\n          location: dataDetect?.groupText?.[key].locate!,\n        };\n      }\n    });\n    dispatch(actions.translateText(dataTrans));\n  };\n  const handleRemoveText = () => {\n    const dataForm = form.getFieldsValue();\n    const dataLocation: CustomObject<number[][]> = {};\n    Object.entries(dataForm).forEach(([key, group]) => {\n      if (group.isTrans) {\n        dataLocation[key] = dataDetect?.groupText?.[key].locate!;\n      }\n    });\n    dispatch(actions.removeText(dataLocation));\n  };\n\n  return (\n    <Layout style={{ background: 'white' }}>\n      <Form form={form} layout=\"vertical\">\n        {Object.entries(dataDetect?.groupText ?? {})\n          .sort(([a], [b]) => Number(a.split('p')[1]) - Number(b.split('p')[1]))\n          .map(([key]) => (\n            <Row gutter={10} align=\"middle\" key={key}>\n              {showOriginText ? (\n                <Col span={11}>\n                  <Form.Item label={key.split('p')[1]} name={[key, 'text']}>\n                    <Input />\n                  </Form.Item>\n                </Col>\n              ) : null}\n              <Col span={showOriginText ? 11 : 22}>\n                <Form.Item label={showOriginText ? 'Bản dịch' : key} name={[key, 'textTrans']}>\n                  <Input />\n                </Form.Item>\n              </Col>\n              <Col span={2}>\n                <Form.Item label=\"Chọn\" name={[key, 'isTrans']} valuePropName=\"checked\">\n                  <Switch />\n                </Form.Item>\n              </Col>\n            </Row>\n          ))}\n      </Form>\n      <Row gutter={[10, 10]} style={{ justifyContent: 'center' }}>\n        <Col>\n          <Button type=\"primary\" onClick={handleTranslate}>\n            Translate Comic\n          </Button>\n        </Col>\n        <Col>\n          <Button danger type=\"primary\" onClick={handleRemoveText}>\n            Remove Text In Comic\n          </Button>\n        </Col>\n      </Row>\n    </Layout>\n  );\n};\n\nexport default TranslateOptions;\n","import { Col, Image, Layout, Row } from 'antd';\nimport Waiting from 'components/Waiting';\nimport React from 'react';\nimport { useSelector } from 'react-redux';\nimport { getUrlImageBase64 } from 'utils/image';\n\nimport Header from './Header';\nimport PickImage from './PickImage';\nimport { selectDataDetect, selectOriginImage, selectWating } from './store/selectors';\nimport S from './styles.module.less';\nimport TranslateOptions from './TranslateOptions';\n\nconst Translate = () => {\n  const img = useSelector(selectOriginImage);\n  const waiting = useSelector(selectWating);\n  const dataDetect = useSelector(selectDataDetect);\n  return (\n    <Layout className={S.container}>\n      {waiting ? <Waiting /> : null}\n      <Header />\n      <Layout.Content className={S.content}>\n        <Row gutter={[16, 8]} style={{ minHeight: window.innerHeight - 200 }}>\n          <Col span={img ? 10 : 24}>\n            {img ? (\n              <Image\n                style={{ maxHeight: window.innerHeight - 200 }}\n                src={\n                  dataDetect?.imageDetected\n                    ? getUrlImageBase64(dataDetect.imageDetected)\n                    : getUrlImageBase64(img)\n                }\n              />\n            ) : (\n              <PickImage />\n            )}\n          </Col>\n          <Col span={14}>{dataDetect ? <TranslateOptions /> : null}</Col>\n        </Row>\n      </Layout.Content>\n    </Layout>\n  );\n};\n\nexport default Translate;\n","import { Layout } from 'antd';\nimport Translate from 'features/Translate';\n\nconst Home = () => (\n  <Layout>\n    <Translate />\n  </Layout>\n);\n\nexport default Home;\n"],"names":["getUrlImageBase64","base64","concat","FONTS","options","initialState","fontSize","maxWidth","showOriginText","handing","useCurrentImage","font","slice","name","reducers","changeFont","state","action","payload","changeFontSize","changeShowOriginText","changeMaxWidth","changeUseCurrentImage","detectBubble","translateText","_action","removeText","updateDataDetect","actions","dataDetect","updateOriginImage","originImage","updateImageDetect","_objectSpread","imageDetected","updateTranslated","translated","createSliceOriginal","key","reducer","BACKEND","getApiProblem","response","problem","kind","temporary","error","originalError","status","Api","_createClass","config","_this","_classCallCheck","api","post","_ref","_asyncToGenerator","_regeneratorRuntime","mark","_callee","path","params","wrap","_context","prev","next","sent","ok","abrupt","data","stop","_x","_x2","apply","arguments","this","create","backendService","baseURL","selectDomain","translateStore","selectWating","createSelector","selectShowOriginText","selectOriginImage","selectTranslateData","selectDataDetect","_marked2","_marked3","_marked4","saga","image","result","select","put","translateAction","undefined","notification","message","description","_marked","_translateData$dataDe","_translateData$font","translateData","useOriginImage","_context2","dataTrans","Object","values","map","value","entries","forEach","_ref2","_slicedToArray","text","location","textInLine","_translateData$transl","selectedGroup","transLatedData","_context3","keys","_ref3","_ref4","includes","_context4","all","takeLatest","useTranslateSlice","useReducer","useSaga","useInjectSaga","useSelector","dispatch","useDispatch","_Form$useForm","Form","form","useEffect","setFieldsValue","handleRemoveImage","_jsxs","Layout","className","S","style","display","children","_jsx","Typography","level","Row","gutter","layout","width","onValuesChange","_","alignItems","Col","span","label","Select","fontFamily","range","margin","valuePropName","marginBottom","Checkbox","Button","danger","type","onClick","_Fragment","Dragger","Upload","height","window","innerHeight","beforeUpload","file","Promise","resolve","reject","reader","FileReader","readAsDataURL","onload","toString","split","onerror","getBase64","then","InboxOutlined","_dataDetect$groupText4","_dataDetect$groupText","originForm","groupText","group","isTrans","textTrans","background","sort","_ref7","_ref8","a","b","Number","_ref11","align","Input","Switch","justifyContent","dataForm","getFieldsValue","_dataDetect$groupText2","locate","dataLocation","_ref5","_dataDetect$groupText3","_ref6","img","waiting","Waiting","Header","minHeight","Image","maxHeight","src","PickImage","TranslateOptions","Translate"],"sourceRoot":""}